/**
 * TaskMaster - Advanced Task Management Application
 * Generated by qwen2.5-coder:7b model test
 * 
 * Features:
 * - Complete CRUD operations for tasks
 * - Local storage persistence
 * - Search and filtering
 * - Task categories and priorities
 * - Export/Import functionality
 * - Responsive design
 * - Real-time statistics
 */

class TaskManager {
    constructor() {
        this.tasks = [];
        this.currentEditId = null;
        this.currentView = 'grid';
        this.filters = {
            search: '',
            category: '',
            priority: '',
            status: ''
        };
        
        this.init();
    }
    
    init() {
        this.loadTasks();
        this.bindEvents();
        this.updateDisplay();
        this.updateStats();
        this.showToast('Welcome to TaskMaster!', 'info');
    }
    
    // Event Binding
    bindEvents() {
        // Form submission
        document.getElementById('taskForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleTaskSubmit();
        });
        
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', (e) => {
            this.filters.search = e.target.value.toLowerCase();
            this.updateDisplay();
        });
        
        // Filter functionality
        document.getElementById('categoryFilter').addEventListener('change', (e) => {
            this.filters.category = e.target.value;
            this.updateDisplay();
        });
        
        document.getElementById('priorityFilter').addEventListener('change', (e) => {
            this.filters.priority = e.target.value;
            this.updateDisplay();
        });
        
        document.getElementById('statusFilter').addEventListener('change', (e) => {
            this.filters.status = e.target.value;
            this.updateDisplay();
        });
        
        // Clear filters
        document.getElementById('clearFilters').addEventListener('click', () => {
            this.clearFilters();
        });
        
        // View toggle
        document.getElementById('gridView').addEventListener('click', () => {
            this.setView('grid');
        });
        
        document.getElementById('listView').addEventListener('click', () => {
            this.setView('list');
        });
        
        // Export/Import
        document.getElementById('exportBtn').addEventListener('click', () => {
            this.exportTasks();
        });
        
        document.getElementById('importBtn').addEventListener('click', () => {
            document.getElementById('importFile').click();
        });
        
        document.getElementById('importFile').addEventListener('change', (e) => {
            this.importTasks(e.target.files[0]);
        });
        
        // Cancel edit
        document.getElementById('cancelEdit').addEventListener('click', () => {
            this.cancelEdit();
        });
        
        // Modal events
        this.bindModalEvents();
    }
    
    bindModalEvents() {
        // Close modals
        document.querySelectorAll('.close-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.closeModal(e.target.closest('.modal'));
            });
        });
        
        // Modal backdrop click
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal(modal);
                }
            });
        });
        
        // Confirmation modal
        document.getElementById('confirmYes').addEventListener('click', () => {
            if (this.pendingAction) {
                this.pendingAction();
                this.pendingAction = null;
            }
            this.closeModal(document.getElementById('confirmModal'));
        });
        
        document.getElementById('confirmNo').addEventListener('click', () => {
            this.pendingAction = null;
            this.closeModal(document.getElementById('confirmModal'));
        });
    }
    
    // Task Management
    handleTaskSubmit() {
        const form = document.getElementById('taskForm');
        const formData = new FormData(form);
        
        const task = {
            id: this.currentEditId || this.generateId(),
            title: document.getElementById('taskTitle').value.trim(),
            description: document.getElementById('taskDescription').value.trim(),
            category: document.getElementById('taskCategory').value,
            priority: document.getElementById('taskPriority').value,
            dueDate: document.getElementById('taskDueDate').value,
            completed: false,
            createdAt: this.currentEditId ? this.getTask(this.currentEditId).createdAt : new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
        
        if (!task.title) {
            this.showToast('Task title is required!', 'error');
            return;
        }
        
        if (this.currentEditId) {
            this.updateTask(task);
            this.showToast('Task updated successfully!', 'success');
            this.cancelEdit();
        } else {
            this.addTask(task);
            this.showToast('Task added successfully!', 'success');
        }
        
        form.reset();
        this.saveTasks();
        this.updateDisplay();
        this.updateStats();
    }
    
    addTask(task) {
        this.tasks.unshift(task);
    }
    
    updateTask(updatedTask) {
        const index = this.tasks.findIndex(task => task.id === updatedTask.id);
        if (index !== -1) {
            this.tasks[index] = { ...this.tasks[index], ...updatedTask };
        }
    }
    
    deleteTask(id) {
        this.tasks = this.tasks.filter(task => task.id !== id);
        this.saveTasks();
        this.updateDisplay();
        this.updateStats();
        this.showToast('Task deleted successfully!', 'success');
    }
    
    toggleTaskComplete(id) {
        const task = this.getTask(id);
        if (task) {
            task.completed = !task.completed;
            task.updatedAt = new Date().toISOString();
            this.saveTasks();
            this.updateDisplay();
            this.updateStats();
            
            const status = task.completed ? 'completed' : 'marked as pending';
            this.showToast(`Task ${status}!`, 'success');
        }
    }
    
    getTask(id) {
        return this.tasks.find(task => task.id === id);
    }
    
    editTask(id) {
        const task = this.getTask(id);
        if (!task) return;
        
        this.currentEditId = id;
        
        // Populate form
        document.getElementById('taskTitle').value = task.title;
        document.getElementById('taskDescription').value = task.description || '';
        document.getElementById('taskCategory').value = task.category;
        document.getElementById('taskPriority').value = task.priority;
        document.getElementById('taskDueDate').value = task.dueDate || '';
        
        // Update form UI
        document.querySelector('.add-task-section h2').textContent = 'Edit Task';
        document.getElementById('cancelEdit').style.display = 'inline-flex';
        document.querySelector('#taskForm button[type="submit"]').innerHTML = '<i class="fas fa-save"></i> Update Task';
        
        // Scroll to form
        document.querySelector('.add-task-section').scrollIntoView({ behavior: 'smooth' });
    }
    
    cancelEdit() {
        this.currentEditId = null;
        document.getElementById('taskForm').reset();
        document.querySelector('.add-task-section h2').textContent = 'Add New Task';
        document.getElementById('cancelEdit').style.display = 'none';
        document.querySelector('#taskForm button[type="submit"]').innerHTML = '<i class="fas fa-plus"></i> Add Task';
    }
    
    // Display and Filtering
    updateDisplay() {
        const filteredTasks = this.getFilteredTasks();
        const taskList = document.getElementById('taskList');
        const emptyState = document.getElementById('emptyState');
        
        if (filteredTasks.length === 0) {
            taskList.style.display = 'none';
            emptyState.style.display = 'block';
            return;
        }
        
        taskList.style.display = 'grid';
        emptyState.style.display = 'none';
        
        taskList.innerHTML = filteredTasks.map(task => this.createTaskHTML(task)).join('');
        
        // Bind task-specific events
        this.bindTaskEvents();
    }
    
    createTaskHTML(task) {
        const isOverdue = task.dueDate && new Date(task.dueDate) < new Date() && !task.completed;
        const dueDateFormatted = task.dueDate ? new Date(task.dueDate).toLocaleDateString() : '';
        
        return `
            <div class="task-item ${task.completed ? 'completed' : ''}" data-task-id="${task.id}">
                <div class="task-priority ${task.priority}"></div>
                
                <div class="task-header">
                    <h3 class="task-title">${this.escapeHtml(task.title)}</h3>
                    <div class="task-actions">
                        <button class="task-action-btn" onclick="taskManager.toggleTaskComplete('${task.id}')" 
                                title="${task.completed ? 'Mark as pending' : 'Mark as completed'}">
                            <i class="fas fa-${task.completed ? 'undo' : 'check'}"></i>
                        </button>
                        <button class="task-action-btn" onclick="taskManager.editTask('${task.id}')" title="Edit task">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="task-action-btn" onclick="taskManager.showTaskDetails('${task.id}')" title="View details">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="task-action-btn" onclick="taskManager.confirmDelete('${task.id}')" title="Delete task">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                
                <div class="task-meta">
                    <span class="task-badge category">${task.category}</span>
                    <span class="task-badge priority ${task.priority}">${task.priority}</span>
                    ${task.dueDate ? `<span class="task-badge due-date ${isOverdue ? 'overdue' : ''}">${dueDateFormatted}</span>` : ''}
                </div>
                
                ${task.description ? `<div class="task-description">${this.escapeHtml(task.description)}</div>` : ''}
                
                <div class="task-footer">
                    <div class="task-status">
                        <i class="fas fa-${task.completed ? 'check-circle' : 'clock'}"></i>
                        ${task.completed ? 'Completed' : 'Pending'}
                    </div>
                    <div class="task-date">
                        Created: ${new Date(task.createdAt).toLocaleDateString()}
                    </div>
                </div>
            </div>
        `;
    }
    
    bindTaskEvents() {
        // Task click events are handled by onclick attributes in HTML for simplicity
        // In a production app, you might want to use event delegation
    }
    
    getFilteredTasks() {
        return this.tasks.filter(task => {
            // Search filter
            if (this.filters.search && 
                !task.title.toLowerCase().includes(this.filters.search) &&
                !task.description.toLowerCase().includes(this.filters.search)) {
                return false;
            }
            
            // Category filter
            if (this.filters.category && task.category !== this.filters.category) {
                return false;
            }
            
            // Priority filter
            if (this.filters.priority && task.priority !== this.filters.priority) {
                return false;
            }
            
            // Status filter
            if (this.filters.status === 'completed' && !task.completed) {
                return false;
            }
            if (this.filters.status === 'pending' && task.completed) {
                return false;
            }
            
            return true;
        });
    }
    
    clearFilters() {
        this.filters = {
            search: '',
            category: '',
            priority: '',
            status: ''
        };
        
        // Reset form controls
        document.getElementById('searchInput').value = '';
        document.getElementById('categoryFilter').value = '';
        document.getElementById('priorityFilter').value = '';
        document.getElementById('statusFilter').value = '';
        
        this.updateDisplay();
        this.showToast('Filters cleared!', 'info');
    }
    
    setView(view) {
        this.currentView = view;
        const taskList = document.getElementById('taskList');
        const gridBtn = document.getElementById('gridView');
        const listBtn = document.getElementById('listView');
        
        if (view === 'grid') {
            taskList.className = 'task-list grid-view';
            gridBtn.classList.add('active');
            listBtn.classList.remove('active');
        } else {
            taskList.className = 'task-list list-view';
            listBtn.classList.add('active');
            gridBtn.classList.remove('active');
        }
    }
    
    // Statistics
    updateStats() {
        const total = this.tasks.length;
        const completed = this.tasks.filter(task => task.completed).length;
        const pending = total - completed;
        
        document.getElementById('totalTasks').textContent = total;
        document.getElementById('completedTasks').textContent = completed;
        document.getElementById('pendingTasks').textContent = pending;
    }
    
    // Modal Management
    showTaskDetails(id) {
        const task = this.getTask(id);
        if (!task) return;
        
        const modal = document.getElementById('taskModal');
        const detailsContainer = document.getElementById('taskDetails');
        
        const isOverdue = task.dueDate && new Date(task.dueDate) < new Date() && !task.completed;
        
        detailsContainer.innerHTML = `
            <div class="task-detail-item">
                <strong>Title:</strong> ${this.escapeHtml(task.title)}
            </div>
            <div class="task-detail-item">
                <strong>Description:</strong> ${task.description ? this.escapeHtml(task.description) : 'No description'}
            </div>
            <div class="task-detail-item">
                <strong>Category:</strong> ${task.category}
            </div>
            <div class="task-detail-item">
                <strong>Priority:</strong> ${task.priority}
            </div>
            <div class="task-detail-item">
                <strong>Status:</strong> ${task.completed ? 'Completed' : 'Pending'}
            </div>
            ${task.dueDate ? `
                <div class="task-detail-item">
                    <strong>Due Date:</strong> ${new Date(task.dueDate).toLocaleDateString()} 
                    ${isOverdue ? '<span style="color: var(--danger-color);">(Overdue)</span>' : ''}
                </div>
            ` : ''}
            <div class="task-detail-item">
                <strong>Created:</strong> ${new Date(task.createdAt).toLocaleString()}
            </div>
            <div class="task-detail-item">
                <strong>Last Updated:</strong> ${new Date(task.updatedAt).toLocaleString()}
            </div>
        `;
        
        this.showModal(modal);
    }
    
    confirmDelete(id) {
        const task = this.getTask(id);
        if (!task) return;
        
        const modal = document.getElementById('confirmModal');
        const message = document.getElementById('confirmMessage');
        
        message.textContent = `Are you sure you want to delete "${task.title}"? This action cannot be undone.`;
        
        this.pendingAction = () => this.deleteTask(id);
        this.showModal(modal);
    }
    
    showModal(modal) {
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }
    
    closeModal(modal) {
        modal.classList.remove('show');
        document.body.style.overflow = '';
    }
    
    // Data Persistence
    saveTasks() {
        try {
            localStorage.setItem('taskmaster_tasks', JSON.stringify(this.tasks));
        } catch (error) {
            this.showToast('Error saving tasks to local storage!', 'error');
            console.error('Save error:', error);
        }
    }
    
    loadTasks() {
        try {
            const saved = localStorage.getItem('taskmaster_tasks');
            this.tasks = saved ? JSON.parse(saved) : [];
        } catch (error) {
            this.showToast('Error loading tasks from local storage!', 'error');
            console.error('Load error:', error);
            this.tasks = [];
        }
    }
    
    // Import/Export
    exportTasks() {
        try {
            const dataStr = JSON.stringify(this.tasks, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `taskmaster_export_${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            this.showToast('Tasks exported successfully!', 'success');
        } catch (error) {
            this.showToast('Error exporting tasks!', 'error');
            console.error('Export error:', error);
        }
    }
    
    importTasks(file) {
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const importedTasks = JSON.parse(e.target.result);
                
                if (!Array.isArray(importedTasks)) {
                    throw new Error('Invalid file format');
                }
                
                // Validate task structure
                const validTasks = importedTasks.filter(task => 
                    task.id && task.title && task.category && task.priority
                );
                
                if (validTasks.length === 0) {
                    throw new Error('No valid tasks found in file');
                }
                
                // Merge with existing tasks (avoid duplicates)
                const existingIds = new Set(this.tasks.map(task => task.id));
                const newTasks = validTasks.filter(task => !existingIds.has(task.id));
                
                this.tasks = [...this.tasks, ...newTasks];
                this.saveTasks();
                this.updateDisplay();
                this.updateStats();
                
                this.showToast(`Imported ${newTasks.length} tasks successfully!`, 'success');
            } catch (error) {
                this.showToast('Error importing tasks! Please check file format.', 'error');
                console.error('Import error:', error);
            }
        };
        
        reader.readAsText(file);
    }
    
    // Utility Functions
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    showToast(message, type = 'info') {
        const container = document.getElementById('toastContainer');
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.innerHTML = `
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <i class="fas fa-${this.getToastIcon(type)}"></i>
                <span>${this.escapeHtml(message)}</span>
            </div>
        `;
        
        container.appendChild(toast);
        
        // Auto remove after 3 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 3000);
        
        // Remove on click
        toast.addEventListener('click', () => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        });
    }
    
    getToastIcon(type) {
        const icons = {
            success: 'check-circle',
            error: 'exclamation-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };
        return icons[type] || 'info-circle';
    }
}

// Initialize the application
let taskManager;

document.addEventListener('DOMContentLoaded', () => {
    taskManager = new TaskManager();
});

// Keyboard shortcuts
document.addEventListener('keydown', (e) => {
    // Ctrl/Cmd + N: Add new task
    if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
        e.preventDefault();
        document.getElementById('taskTitle').focus();
    }
    
    // Escape: Cancel edit or close modals
    if (e.key === 'Escape') {
        if (taskManager.currentEditId) {
            taskManager.cancelEdit();
        }
        
        // Close any open modals
        document.querySelectorAll('.modal.show').forEach(modal => {
            taskManager.closeModal(modal);
        });
    }
    
    // Ctrl/Cmd + F: Focus search
    if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
        e.preventDefault();
        document.getElementById('searchInput').focus();
    }
});
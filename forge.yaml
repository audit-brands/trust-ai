# yaml-language-server: $schema=./forge.schema.json
agents:
- id: forge
  tools:
  - forge_tool_task_list_append
  - forge_tool_task_list_append_multiple
  - forge_tool_task_list_mark_done
  - forge_tool_task_list_list
  - forge_tool_task_list_clear
variables:
  operating_agent: forge
commands:
- name: fixme
  description: Looks for all the fixme comments in the code and attempts to fix them
  prompt: Find all the FIXME comments in source-code files and attempt to fix them.
- name: pr-description
  description: Updates the description of the PR
  prompt: |-
    - I have created a Pull Request with all the accepted changes
    - Understand the current PR deeply using the GH CLI and update the PR title and description
    - Make sure the title follows conventional commits standard
    - Top-level summary should contain 2-3 lines about the core functionality improvements
- name: check
  description: Checks if the code is ready to be committed
  prompt: |-
    - Run the `lint` and `test` commands and verify if everything is fine.
      <lint>cargo +nightly fmt --all; cargo +nightly clippy --fix --allow-staged --allow-dirty --workspace</lint>
      <test>cargo insta test --accept --unreferenced=delete</test>
    - Fix every issue found in the process
model: anthropic/claude-sonnet-4
max_walker_depth: 1024
custom_rules: "Handling Errors:\n\n- Use `anyhow::Result` for error handling in services and repositories.\n- Create domain errors using `thiserror`.\n- Never implement `From` for converting domain errors, manually convert them\n\nWriting Tests:\n\n- All tests should be written in three discrete steps:\n\n  ```rust\n  use pretty_assertions::assert_eq; // Always use pretty assertions\n\n  fn test_foo() {\n      let fixture = ...; // Instantiate a fixture for the test\n      let actual = ...; // Execute the fixture to create an output\n      let expected = ...; // Define a hand written expected result\n      assert_eq!(actual, expected); // Assert that the actual result matches the expected result\n  }\n  ```\n\n- Use `pretty_assertions` for better error messages.\n- Use fixtures to create test data.\n- Use `assert_eq!` for equality checks.\n- Use `assert!(...)` for boolean checks.\n- Use unwraps in test functions and anyhow::Result in fixtures.\n- Keep the boilerplate to a minimum.\n- Use words like `fixture`, `actual` and `expected` in test functions.\n- Fixtures should be generic and reusable.\n- Test should always be written in the same file as the source code.\n\nRunning Tests:\n- We use `insta` to run tests:\n```\ncargo insta test --accept --unreferenced=delete\n```\n\nVerification:\n- run the following command to format and validate if the code is working:\n  ```\n  cargo +nightly fmt --all; cargo +nightly clippy --fix --allow-staged --allow-dirty --workspace;\n  ```\n\nWriting Domain Types:\n- Use `derive_setters` to derive setters and use the `strip_option` and the `into` attributes on the struct types.\n\n\nRefactoring:\n- If asked to fix failing tests, always confirm whether to update the implementation or the tests.\n\n# Enhanced fallback configuration (Phase 7)\nenhanced_fallback:\n  # Enable adaptive strategy selection\n  adaptive_strategy: true\n  \n  # Performance-based provider ranking\n  performance_ranking: true\n  \n  # User experience optimizations\n  ux_optimizations:\n    # Preemptive fallback based on performance degradation\n    preemptive_fallback: true\n    \n    # Smart retry with exponential backoff\n    smart_retry: true\n    \n    # Seamless provider switching\n    seamless_switching: true\n    \n    # Context-aware notifications\n    context_aware_notifications: true\n    \n    # Response time optimization\n    response_time_optimization: true\n  \n  # Pattern learning configuration\n  pattern_learning:\n    # Enable learning from user behavior\n    enabled: true\n    \n    # Time-based usage patterns\n    time_patterns: true\n    \n    # Model-specific preferences\n    model_preferences: true\n    \n    # Workload-based optimization\n    workload_optimization: true\n    \n    # Learning window in days\n    learning_window_days: 30\n  \n  # Cost optimization settings\n  cost_optimization:\n    # Enable cost-aware fallback\n    enabled: true\n    \n    # Prefer local providers for cost savings\n    prefer_local_for_cost: true\n    \n    # Cloud provider cost ranking (cheapest first)\n    cloud_cost_ranking:\n      - \"openai\"\n      - \"anthropic\"\n    \n    # Budget-based switching\n    budget_aware_switching: false\n    \n    # Daily budget limit in USD (optional)\n    # daily_budget_limit: 10.0"
